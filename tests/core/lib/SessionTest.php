<?php

namespace ICT\Core\Test;

use ICT\Core\Session;
use PHPUnit_Framework_TestCase;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2017-01-11 at 11:28:45.
 */
class SessionTest extends PHPUnit_Framework_TestCase
{

  /**
   * @var Session
   */
  protected $object;
  protected $data = array(
      'element1' => 'Value for first element',
      'array1' => array(
          'child1' => 'Child one',
          'child2' => 'Child two',
          'child3' => array(
              'dog1' => 'tommy',
              'dog2' => 'jack'
          )
      ),
      'element2' => 'Value for third element'
  );

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp()
  {
    $this->object = new Session($this->data);
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown()
  {
    unset($this->object);
  }

  /**
   * @covers ICT\Core\Session::get_instance
   */
  public function testGet_instance()
  {
    $oSession = Session::get_instance();
    $this->assertInstanceOf('\ICT\Core\Session', $oSession);
  }

  /**
   * @covers ICT\Core\Session::set
   */
  public function testSet()
  {
    // static Session is not supported
    // and then with instance
    $oSession = Session::get_instance();
    $oSession->set('hello:moon', 'beautiful');
    $this->assertSame('beautiful', $oSession->get('hello:moon'));
  }

  /**
   * @covers ICT\Core\Session::get
   */
  public function testGet()
  {
    // static Session is not supported
    // and then with instance
    $oSession = Session::get_instance();
    $oSession->set('array1', $this->data['array1']);
    $this->assertSame('jack', $oSession['array1:child3:dog2']);
    $this->assertSame('jack', $oSession->{'array1:child3:dog2'});
    // and test for default
    $this->assertSame('defaultValue', $oSession->get('none_existing:one', 'defaultValue'));
  }

  /**
   * @covers ICT\Core\Session::open
   * @todo   Implement testOpen().
   */
  public function testOpen()
  {
    // Remove the following lines when you implement this test.
    $this->markTestIncomplete(
            'This test has not been implemented yet.'
    );
  }

  /**
   * @covers ICT\Core\Session::close
   * @todo   Implement testClose().
   */
  public function testClose()
  {
    // Remove the following lines when you implement this test.
    $this->markTestIncomplete(
            'This test has not been implemented yet.'
    );
  }

  /**
   * @covers ICT\Core\Session::read
   * @todo   Implement testRead().
   */
  public function testRead()
  {
    // Remove the following lines when you implement this test.
    $this->markTestIncomplete(
            'This test has not been implemented yet.'
    );
  }

  /**
   * @covers ICT\Core\Session::write
   * @todo   Implement testWrite().
   */
  public function testWrite()
  {
    // Remove the following lines when you implement this test.
    $this->markTestIncomplete(
            'This test has not been implemented yet.'
    );
  }

  /**
   * @covers ICT\Core\Session::destroy
   * @todo   Implement testDestroy().
   */
  public function testDestroy()
  {
    // Remove the following lines when you implement this test.
    $this->markTestIncomplete(
            'This test has not been implemented yet.'
    );
  }

  /**
   * @covers ICT\Core\Session::gc
   * @todo   Implement testGc().
   */
  public function testGc()
  {
    // Remove the following lines when you implement this test.
    $this->markTestIncomplete(
            'This test has not been implemented yet.'
    );
  }

}